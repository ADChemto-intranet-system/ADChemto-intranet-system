ADChemto Intranet System 구축 제안서
====================================

1. 시스템 아키텍처(권장 구조)
--------------------------
1) 프론트엔드
- Next.js (React 기반)
  - SSR, SSG, CSR 지원
  - 인트라넷(로그인 필요)과 홈페이지(공개) 모두 구현에 최적
  - TypeScript 적극 사용 권장
  - UI 라이브러리: Chakra UI, MUI, Tailwind CSS 등 선택

2) 백엔드
- FastAPI (Python)
  - 빠르고, 타입 안전하며, 문서화(Swagger) 자동 지원
  - RESTful API, 인증, 권한, 확장성 모두 우수
  - SQLAlchemy + Alembic(마이그레이션) 조합 추천

3) 데이터베이스
- PostgreSQL (권장) 또는 MySQL
  - 확장성, 안정성, 오픈소스

4) 인증/인가
- next-auth (프론트엔드) + FastAPI JWT 인증
  - SSO, 소셜 로그인, 자체 로그인 등 확장 가능

5) 배포/운영
- Docker로 프론트/백엔드/DB 컨테이너화
- GitHub Actions 등 CI/CD 자동화
- 클라우드: AWS, Azure, GCP, 또는 자체 서버

2. 폴더 구조 예시
----------------
ADChemto_Intranet_System/
├── frontend/         # Next.js (홈페이지+인트라넷)
├── backend/          # FastAPI
├── db/               # DB 마이그레이션, 초기 데이터 등
├── docs/             # 문서, API 명세 등
└── README.md

3. 주요 라이브러리/툴
-------------------
프론트엔드
- next, react, react-dom, typescript, next-auth, axios
- chakra-ui, tailwindcss, mui 등 (UI)
- eslint, prettier (코드 품질)

백엔드
- fastapi, uvicorn, sqlalchemy, alembic, pydantic
- python-jose (JWT), passlib (비밀번호 해시), databases, pytest

공통/운영
- docker, docker-compose, git, github
- pre-commit, black, isort (Python 코드 스타일)
- CI/CD: GitHub Actions, Jenkins 등

4. 확장성과 유지보수 팁
----------------------
- API 명세(Swagger/OpenAPI) 자동화: FastAPI 기본 제공
- 모듈화/컴포넌트화: 프론트엔드와 백엔드 모두 기능별로 폴더 분리
- 환경변수(.env)로 설정 관리
- 테스트 코드 작성 습관화
- 문서화(README, API 문서) 필수

5. 인트라넷/홈페이지 동시 구현 전략
-------------------------------
- Next.js의 app 디렉토리 구조 활용
  - / : 홈페이지(공개)
  - /intranet : 로그인 필요(인트라넷)
  - /admin : 관리자 페이지(권한 필요)
- 공통 컴포넌트/레이아웃 재사용
- API는 FastAPI에서 일원화, 권한별로 분기

6. 추천 개발 순서
----------------
1) 백엔드 FastAPI 기본 구조/DB/인증 구축
2) 프론트엔드 Next.js 기본 구조/라우팅/로그인 연동
3) 인트라넷/홈페이지 UI/UX 설계 및 구현
4) 운영 자동화(Docker, CI/CD)
5) 문서화 및 테스트

결론
----
- Next.js + FastAPI + PostgreSQL + Docker 조합이 확장성, 유지보수, 인트라넷/홈페이지 동시 구현에 최적입니다.
- 위 구조와 라이브러리로 시작하면 추후 기능 추가, 인원 확장, 배포 등 모든 면에서 유리합니다.

*구체적인 초기 세팅, 예시 코드, 폴더 구조, 각 단계별 가이드가 필요하면 언제든 요청해 주세요!* 